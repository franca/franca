package org.example

interface Speller {

	// ***************************************************************
	// attributes

   <**
		@description : State of operation of location input controller
		               current state of operation
   **>
	attribute EStateOfOperation ControllerOperationState


	// ***************************************************************
	// methods of speller interface

	<**
		@description : Selects the current speller input. The spelling process ends and the location input state is updated accordingly. 
		@param : inputState returns the location input state
	**>
	method selectInput {
		out {
			TInputState inputState
		}
//		error:
//			XErrorSetDefault 
//         	XErrorSetSpelling
	}
	

	<**
		@description : Selects an entry of the list of available entries. The spelling process ends and the current location input state is updated accordingly
		@param : starts at the given index 
		@param : inputState returns the location input state
	**>
	method selectValueListEntry {
		in {
			UInt32 index
		}
		out {
			TInputState inputState
		}
	}
	
		
	<**
		@description : Retrieves a section of the list of available entries. Does not modify the state of the speller
		@param : index starts at the given index
		@param : length number of requested elements
		@param : valueList returns the requested value list 
	**>
	method getValueListEntries {
		in {
			UInt32 index 
			UInt32 length 
		}
		out {
			TValueList valueList
		}
//		error:
//			XErrorSetDefault 
//         	XErrorSetSpelling
	}
	
	<**
		@description : Adds a character to the speller input
		@param : character the added character 
		@param : spellerState returns the updated speller state
	**>
	method addCharacter {
		in {
			String character
		}
		out {
			TSpellerState spellerState
		}
//		error:
//			XErrorSetDefault 
//         	XErrorSetSpelling
	}

	
	<**
		@description : Starts the spelling process for a selection criterion. 
					   If the current location description already contains data for this criterion the data will be removed and 
					   the user can change the previously entered data. Otherwise the entered data is appended to the end of the location description
		@param : criterion the given selection criterion
		@param : spellerState returns the updated speller state
	**>
	method startSpelling {
		in {
			ECriterion criterion
		}
		out {
			TSpellerState spellerState
		}	
//	 	error: 
//         	XErrorSetDefault
	}


	<**
		@description : Returns the current location input state to the HMI
		@param : inputState returns the location input state
	**>
	method getCurrentState {
		out {
			TInputState inputState
		}
//		error: 
//        	XErrorSetDefault
	}
	
	<**
		@description : Removes a previously entered character of the speller input. 
		@param : spellerState returns the updatedd speller state
	**>
	method undoCharacter {
		out {
			TSpellerState spellerState
		}		
//		error:
//			XErrorSetDefault 
//         	XErrorSetSpelling
	}
	

	<**
		@description : Cancels the current spelling process. The current location description remains unchanged.  
		@param : inputState returns the current location input state
	**>
	method cancel {
		out { 
			TInputState inputState
		}
//		error:
//			XErrorSetDefault 
//         	XErrorSetSpelling
	}



	// ***************************************************************
	// data types for speller interface
		
	<** @description : set of location input state criteria **>
	enumeration ECriterion {
	   COUNTRY
	   TOWN
	   STREET
	   HOUSENUMBER
	   ZIPCODE
	}
	
	struct TLocationDescription {
		UInt8 dummy
	}
	
	<** @description : location input state **>
	struct TInputState {
		TLocationDescription locationDescription
		TCriterionList availableSelectionCriteria
		Boolean isDestinationValid
	}


	<**
		@description : set of location input state criteria
	**>
	array TCriterionList of ECriterion 
	
	struct TValueList {
		UInt8 dummy
	}
	
	<** @description : speller input state structure **>
	struct TSpellerState {
		ECriterion criterion
		String inputString
		Boolean isFullMatch
		Boolean isUndoAvailable
		String validCharacters
		TValueList valueList
		UInt32 valueListCount
	}
	
	
	<**
	@param : X_NO_FULLMATCH will be returned when the input is no full match
	@param : X_NO_INPUT will be returned when the property 'input' is empty
	@param : X_NO_HISTORY will be returned when there is no history available to remove a 
	        character. Hhappens when the operation setInput() is used to 
	        initialize the input to an arbitrary value."
	**>
	enumeration XErrorSetSpelling {
	   X_SPELLING_NOT_ACTIVE
	   X_NO_FULLMATCH
	   X_NO_INPUT
	   X_NO_HISTORY
	}
	
	<** @description : reflects state of operation on location input controller **>
	enumeration EStateOfOperation {
	   NOT_OPERABLE
	   FULLY_OPERABLE
	}

	
	// ***************************************************************
	// dynamic behavior

	contract {
		vars {
			TSpellerState lastSpellerState;
			UInt32 charsAdded;
		}
		PSM {
			initial Idle
			
			state Idle {
				on call startSpelling -> ReqStartSpelling
			}

			// start spelling sequence 
			state ReqStartSpelling {
				on respond startSpelling -> Spelling {
					lastSpellerState = spellerState
				}
			}
			state Spelling {
				on call cancel -> ReqCancel
				on call addCharacter -> ReqAddCharacter
				on call undoCharacter [charsAdded>0] -> ReqUndoCharacter
				on call getCurrentState -> ReqGetCurrentState
				on call getValueListEntries
					[ index+length < lastSpellerState->valueListCount]
					-> ReqGetValueListEntries
				on call selectInput
					[ lastSpellerState->isFullMatch ]
					-> ReqSelectInput
				on call selectValueListEntry
					[ index < lastSpellerState->valueListCount ] 
					-> ReqSelectValueListEntry
			}

			// cancel spelling
			state ReqCancel {
				on respond cancel -> Idle {
					charsAdded = 1
				}
			}

			// character-based spelling
			state ReqAddCharacter {
				on respond addCharacter -> Spelling {
					charsAdded = charsAdded + 1
					lastSpellerState = spellerState
				}
			}
			state ReqUndoCharacter {
				on respond undoCharacter -> Spelling {
					charsAdded = charsAdded - 1
					lastSpellerState = spellerState
				}
			}

			// information retrieval						
			state ReqGetCurrentState {
				on respond getCurrentState -> Spelling
			}
			state ReqGetValueListEntries {
				on respond getValueListEntries -> Spelling
			}

			// spelling finalization
			state ReqSelectInput {
				on respond selectInput -> InputSelected
			}
			state ReqSelectValueListEntry {
				on respond selectValueListEntry -> InputSelected
			}
			state InputSelected {
				on respond startSpelling -> Spelling {
					lastSpellerState = spellerState
				}
			}
		}	
	}

}